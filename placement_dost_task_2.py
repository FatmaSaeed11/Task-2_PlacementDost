# -*- coding: utf-8 -*-
"""Placement Dost task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PNFknJVKRRN-Y48keIFW_vBIZrnN1UAC

Parkinsons disease detection

Import Important Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix

"""Load Dataset"""

dataset=pd.read_csv('/content/parkinsons.data')

"""Dataset Information"""

dataset.head()

dataset.shape

dataset.info()

"""check missing values"""

dataset.isnull().sum()

"""Count Ones (patient) and Zeros (doesn't)"""

import matplotlib.pyplot as plt
plt.pie(dataset['status'].value_counts(), labels=['0','1'],autopct="%0.2f")
plt.show()

dataset['status'].value_counts()

"""Assign X and Y"""

X = dataset.drop(columns=['name','status'], axis=1)
Y = dataset['status']

print(X)

print (Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Standard scaler"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""Model"""

model = svm.SVC(kernel='linear')

model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

"""Accuracy"""

print('Accuracy score of training data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

Y_pred=model.predict(X_test)

"""accuracy,precision,recall,f1 score"""

accuracy=accuracy_score(Y_test,Y_pred)
precision=precision_score(Y_test,Y_pred)
recall=recall_score(Y_test,Y_pred)
f1=f1_score(Y_test,Y_pred)

print("Accuracy =",accuracy)
print("precision =",precision)
print("recall =",recall)
print("f1 score =",f1)

"""confusion matrix"""

conf_matrix = confusion_matrix(Y_pred, Y_test)
sns.heatmap(conf_matrix,annot=True,fmt='d',cmap='Blues',cbar=False)
plt.xlabel('predicted Label')
plt.ylabel('Actual Label')
plt.title('Confusion Matrix')

plt.show()

"""prediction"""

input_data = (119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654)

input_data_as_numpy_array = np.asarray(input_data)


input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")

input_data=(197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569
)

input_data_as_numpy_array = np.asarray(input_data)


input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")